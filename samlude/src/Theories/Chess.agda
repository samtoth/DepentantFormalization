{-# OPTIONS --cubical --cumulativity #-}
module Theories.Chess where

open import Foundations.Prelude
open import Foundations.Equiv
open import Foundations.Decidable

open import Control.Eq

open Eq {{...}}

open import Categories.Category
open import Categories.Functor
open import Categories.NaturalTransformation
open import Categories.CATS
open import Categories.TYPE
open import Categories.Diagram.Two
open import Categories.Diagram.Zero

open Functor {{...}}
open IsCategory {{...}}
open Terminal {{...}} renaming (D to ùìì)

open import Data.Fin
open import Data.Bool


{-
RankFile : Rank ‚âÉ File
fst RankFile 0 = A
fst RankFile 1 = B
fst RankFile 2 = C
fst RankFile 3 = D
fst RankFile 4 = E
fst RankFile 5 = F
fst RankFile 6 = G
fst RankFile 7 = H
equiv-proof (snd RankFile) A = ({!0!} , {!!}) , {!!}
equiv-proof (snd RankFile) B = {!!}
equiv-proof (snd RankFile) C = {!!}
equiv-proof (snd RankFile) D = {!!}
equiv-proof (snd RankFile) E = {!!}
equiv-proof (snd RankFile) F = {!!}
equiv-proof (snd RankFile) G = {!!}
equiv-proof (snd RankFile) H = {!!}
-}

data Player : Type where
  B W : Player

opp : Player ‚Üí Player
opp B = W
opp W = B

data Piece : Type where
  P Q K B N R : Piece

data File : Type where
  A B C D E F G H : File

Rank : Type
Rank = Fin 7


data SquareData : Type where
  occupied : Player ‚Üí Piece ‚Üí SquareData
  unoccupied : SquareData

record Position : Type where
  field
    ToMove   : Player
    Castling : Player √ó Bool ‚Üí Bool
    Pieces   : Rank √ó File ‚Üí SquareData

data GameState : Type where
  GameOver : (Player Ôºã ‚ä§) ‚Üí GameState
  Ongoing : Position ‚Üí GameState

drawn : GameState
drawn = GameOver (unsym inj‚ÇÅ (! 0))

won : Player ‚Üí GameState
won = GameOver ‚àò (unsym {_} {‚Ñì-suc ‚Ñì-zero} inj‚ÇÄ)

data RelativeRank : Type where
  QR KR QB KB QN KN Q K : RelativeRank

fromRel : Player ‚Üí RelativeRank ‚Üí File ‚Üí (Rank √ó File)
fromRel = {!!}

-- Partial position is a
PositionF : ‚àÄ {‚Ñì} ‚Üí Functor (TYPE ‚Ñì) (TYPE ‚Ñì)
Functor.F0 PositionF X = Rank √ó File ‚Üí X
Functor.F1 PositionF f pos x = f (pos x)


PosP : ‚àÄ {‚Ñì} ‚Üí Type (‚Ñì-suc ‚Ñì)
PosP {‚Ñì} = PositionF .F0 (SquareData ‚Üí Type ‚Ñì)
module PosPs where
  ‚àô : PosP
  ‚àô _ _ = ‚ä§

  instance
    rfeq : Eq (Rank √ó File)
    (rfeq Eq.‚âü a) b = {!!}

  [_:=_] : (Rank √ó File) ‚Üí SquareData ‚Üí PosP
  [ homePos := x ] pos d with homePos ‚âü pos
  ... | yes _ = x ‚â° d
  ... | no  _ = ‚ä§

data HalfTurn (x : Player) : Position ‚Üí Position ‚Üí Type where
  1stPawn : ‚àÄ {x} ‚Üí {!!}

data Turn : GameState ‚Üí GameState ‚Üí Type where
  Resign : ‚àÄ {x : Player} {p : Position} ‚Üí Turn (Ongoing p) (won (opp x))
  Draw   : ‚àÄ {p : Position} ‚Üí Turn (Ongoing p) drawn
  Move   : ‚àÄ {x : Player} {g h} ‚Üí HalfTurn x g h ‚Üí Turn (Ongoing g) (Ongoing h)


open import Categories.Category.Free

CHESS : Category ‚Ñì-zero ‚Ñì-zero
CHESS = Free GameState Turn
